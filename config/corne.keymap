/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"
#include <locale/keys_de.h>

ZMK_UNICODE_SINGLE(uc_dot, N2, N0, N2, N2) //•
ZMK_UNICODE_SINGLE(uc_dash, N2, N0, N1, N3) //–
ZMK_UNICODE_SINGLE(uc_hor_ellips, N2, N0, N2, N6) //…
ZMK_UNICODE_SINGLE(uc_lat_small_lett_long_s, N0, N1, N7, F) //ſ
ZMK_UNICODE_SINGLE(uc_minus_sign, N2, N2, N1, N2) //−
ZMK_UNICODE_SINGLE(uc_inverted_excl, N0, N0, A, N1) //¡
ZMK_UNICODE_SINGLE(uc_inverted_quest, N0, N0, B, F) //¿

/ {

        macros {
          lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
              = <&macro_param_1to1>
              , <&macro_press &mo MACRO_PLACEHOLDER>
              , <&macro_param_2to1>
              , <&macro_press &kp MACRO_PLACEHOLDER>
              , <&macro_pause_for_release>
              , <&macro_param_2to1>
              , <&macro_release &kp MACRO_PLACEHOLDER>
              , <&macro_param_1to1>
              , <&macro_release &mo MACRO_PLACEHOLDER>
              ;
            };
	};

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |   J  |  Z  |  Y  |  U  |  A  |  Q  |   |  P  |  B  |  M  |  L  |  F  |   ß    |
// |  M3  |  C  |  S  |  I  |  E  |  O  |   |  D  |  T  |  N  |  R  |  H  |   M3   |
// | LMETA|  V  |  X  |  Ü  |  Ä  |  Ö  |   |  W  |  G  |  ,  |  .  |  K  |  RMETA |
//                    |  M4 |  lm | TAB |   | ENT | SPC |  M4 |
                        bindings = <
   &kp DE_J  &kp DE_Z &kp DE_Y &kp DE_U        &kp DE_A          &kp DE_Q               &kp DE_P &kp DE_B  &kp DE_M     &kp DE_L   &kp DE_F &kp DE_SZ
   &mo 2     &kp DE_C &kp DE_S &kp DE_I        &kp DE_E          &kp DE_O               &kp DE_D &kp DE_T  &kp DE_N     &kp DE_R   &kp DE_H &mo 2
   &kp LMETA &kp DE_V &kp DE_X &kp DE_U_UMLAUT &kp DE_A_UMLAUT   &kp DE_O_UMLAUT        &kp DE_W &kp DE_G  &kp DE_COMMA &kp DE_DOT &kp DE_K &kp RMETA
                               &mo 3           &lm 1 LSHIFT      &kp TAB                &kp RET  &kp SPACE &mo 3
                        >;
                };
                shift_layer {
// -----------------------------------------------------------------------------------------
// |       |     |     |     |     |     |   |     |     |     |     |     |   ẞ   |
// |  M3   |     |     |     |     |     |   |     |     |     |     |     |  M3   |
// | LMETA |     |     |     |     |     |   |     |     |     |  –  |  •  | RMETA |
//                     | M4  |     | TAB |   | ENT | SPC |  M4 |
                        bindings = <
   &trans    &trans &trans &trans &trans &trans        &trans  &trans    &trans   &trans  &trans &kp DE_CAPITAL_SZ
   &mo 2     &trans &trans &trans &trans &trans        &trans  &trans    &trans   &trans  &trans &mo 2
   &kp LMETA &trans &trans &trans &trans &trans        &trans  &trans    &uc_dash &uc_dot &trans &kp RMETA
                           &mo 3  &trans &kp TAB       &kp RET &kp SPACE &mo 3 
                        >;
                };

                programming_layer {
// -----------------------------------------------------------------------------------------
// |   @   |  …  |  _  |  [  |  ]  |  ^  |   |  !  |  <  |  >  |  =  |  &  |   ſ   |
// |  M3   |  \  |  /  |  {  |  }  |  *  |   |  ?  |  (  |  )  |  -  |  :  |  M3   |
// | LMETA |  #  |  $  | "|" |  ~  |  `  |   |  +  |  %  |  "  |  '  |  ;  | RMETA |
//                     | GUI |     | SPC |   | ENT | SPC | ALT |
                        bindings = <
   &kp DE_AT &uc_hor_ellips &kp DE_UNDERSCORE &kp DE_LEFT_BRACKET &kp DE_RIGHT_BRACKET &kp DE_CARET        &kp DE_EXCLAMATION &kp DE_LT    &kp DE_GT   &kp DE_EQUAL &kp DE_AMPS  &uc_lat_small_lett_long_s
   &mo 2     &kp DE_BSLH    &kp DE_FSLH       &kp DE_LEFT_BRACE   &kp DE_RIGHT_BRACE   &kp DE_STAR         &kp DE_QMARK       &kp DE_LPAR  &kp DE_RPAR &kp DE_MINUS &kp DE_COLON &mo 2
   &kp LMETA &kp DE_HASH    &kp DE_DLLR       &kp DE_PIPE         &kp DE_TILDE         &kp DE_GRAVE        &kp DE_PLUS        &kp DE_PRCNT &kp DE_DQT  &kp DE_SQT   &kp DE_SEMI  &kp RMETA
                                              &mo 4               &trans               &kp TAB             &kp RET            &kp SPACE    &mo 4
                        >;
                };

                util_layer {
// -----------------------------------------------------------------------------------------
// |   –   |  ⇞  |  ⌫  |  ⇡  |  ⌦  |  ⇟  |   |  ¡  |  7  |  8  |  9  |  +  |   ;   |
// |  M3   |  \  |  /  |  {  |  }  |  *  |   |  ¿  |  4  |  5  |  6  |  .  |  M3   |
// | LMETA |  #  |  $  | "|" |  ~  |  `  |   |  +  |  1  |  2  |  3  |  ,  | RMETA |
//                     | GUI |     | TAB |   | ENT | SPC | ALT |
                        bindings = <
   &uc_minus_sign &kp PAGE_UP &kp BACKSPACE  &kp UP_ARROW   &kp DELETE      &kp PAGE_DOWN        &uc_inverted_excl  &kp N7    &kp N8 &kp N9 &kp DE_PLUS  &kp DE_SEMI
   &mo 2          &kp HOME    &kp LEFT_ARROW &kp DOWN_ARROW &kp RIGHT_ARROW &kp END              &uc_inverted_quest &kp N4    &kp N5 &kp N6 &kp DE_DOT   &mo 2
   &kp LMETA      &kp ESC     &kp TAB        &kp K_PASTE    &kp RET         &kp K_UNDO           &kp DE_COLON       &kp N1    &kp N2 &kp N3 &kp DE_COMMA &kp RMETA
                                             &mo 4          &trans          &kp TAB              &kp RET            &kp SPACE &mo 4
                        >;
                };
        };
};
